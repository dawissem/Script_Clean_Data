# -*- coding: utf-8 -*-
"""script_clean_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/141x3N8oSqps6n8a4R0GPAitrfeGBQiV5
"""

#********************************************************************************************#
#******************************************FROM HERE ****************************************#
#********************************************************************************************#

!pip install python-pptx

from google.colab import drive
from pptx import Presentation
import re
import random

# üìå √âtape 1 : Monter Google Drive
from google.colab import drive
drive.mount('/content/drive')

# üìå √âtape 2 : Installer les biblioth√®ques n√©cessaires
!pip install python-pptx pandas

# üìå √âtape 3 : Extraire les chunks depuis le PowerPoint
from pptx import Presentation
import pandas as pd
import re

def clean_text(text):
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'^\d+[\.\)-]?', '', text)
    return text.strip()

def extract_pptx_chunks(file_path):
    prs = Presentation(file_path)
    chunks = []

    for i, slide in enumerate(prs.slides):
        texts = []
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                text = clean_text(shape.text)
                if text:
                    texts.append(text)
        full_text = " ".join(texts)
        if full_text:
            chunks.append({
                "slide_num": i + 1,
                "text": full_text
            })

    return pd.DataFrame(chunks)

# üìÇ Ton fichier PPTX
file_path = "/content/drive/MyDrive/BASE DE CONNAISSANCES/TW-Formation M√©tiers.pptx"

# üßæ Extraction
df_chunks = extract_pptx_chunks(file_path)

# üíæ Sauvegarde
df_chunks.to_csv("/content/drive/MyDrive/BASE DE CONNAISSANCES/chunks_TW.csv", index=False)
df_chunks.to_json("/content/drive/MyDrive/BASE DE CONNAISSANCES/chunks_TW.json", orient="records", indent=2)

# ‚úÖ Confirmation
print("‚úÖ Extraction termin√©e. Fichier enregistr√© dans Google Drive.")

#***********************************FIN******************************************************#
#********************************************************************************************#
#********************************************************************************************#

# Importer les biblioth√®ques n√©cessaires
from pptx import Presentation
import re
import random

# Fonction pour extraire le texte des diapositives
def extract_text_from_pptx(file_path):
    prs = Presentation(file_path)
    text = []
    for slide in prs.slides:
        for shape in slide.shapes:
            if hasattr(shape, 'text'):
                text.append(shape.text)
    return text

# Nettoyage du texte pour l'utiliser dans le mod√®le RAG
def clean_text(text):
    cleaned_text = []
    for paragraph in text:
        # Retirer les num√©ros de page, les retours √† la ligne inutiles, etc.
        paragraph = paragraph.strip()
        if paragraph:
            # Suppression de ponctuations inutiles et normalisation
            paragraph = re.sub(r'\s+', ' ', paragraph)
            cleaned_text.append(paragraph)
    return cleaned_text

# G√©n√©rer des questions et r√©ponses bas√©es sur le texte nettoy√©
def generate_quiz(text, difficulty_level):
    quiz = []

    # Ici, nous allons simplement g√©n√©rer des questions bas√©es sur les concepts extraits
    for section in text:
        # Exemple de question bas√©e sur la section (vous pouvez ajuster selon le contenu)
        question = f"Quel est le principal concept discut√© dans cette section : {section[:50]}?"
        answers = [f"Option A - {section[:30]}", f"Option B - {section[30:60]}", f"Option C - {section[60:90]}", f"Option D - {section[-30:]}"]

        # On simule un choix correct en fonction de la difficult√©
        correct_answer = random.choice(answers)

        quiz.append({
            'question': question,
            'answers': answers,
            'correct_answer': correct_answer
        })

    # Retourner les quiz g√©n√©r√©s
    return quiz

# Afficher le quiz g√©n√©r√© pour un niveau de difficult√©
def display_quiz(quiz):
    for q in quiz:
        print(f"Question: {q['question']}")
        for ans in q['answers']:
            print(f"  {ans}")
        print(f"R√©ponse correcte: {q['correct_answer']}\n")

# Charger le fichier PPTX
file_path = "/mnt/data/TW-Formation M√©tiers.pptx"

# √âtape 1: Extraire le texte du fichier PowerPoint
extracted_text = extract_text_from_pptx(file_path)

# √âtape 2: Nettoyer le texte
cleaned_text = clean_text(extracted_text)

# Demander √† l'utilisateur le niveau de difficult√©
difficulty_level = input("Veuillez entrer le niveau de difficult√© (facile, moyen, difficile): ").lower()

# √âtape 3: G√©n√©rer des quiz bas√©s sur le texte nettoy√©
quiz = generate_quiz(cleaned_text, difficulty_level)

# √âtape 4: Afficher le quiz
display_quiz(quiz)

cleaned_text

# G√©n√©rer des questions et r√©ponses bas√©es sur le texte nettoy√©
def generate_quiz(text, difficulty_level):
    quiz = []
    for section in text:
        question = f"Quel est le principal concept discut√© dans cette section : {section[:50]}?"
        answers = [f"Option A - {section[:30]}", f"Option B - {section[30:60]}", f"Option C - {section[60:90]}", f"Option D - {section[-30:]}"]
        correct_answer = random.choice(answers)
        quiz.append({
            'question': question,
            'answers': answers,
            'correct_answer': correct_answer
        })
    return quiz
# Afficher le quiz g√©n√©r√©
def display_quiz(quiz):
    for q in quiz:
        print(f"Question: {q['question']}")
        for ans in q['answers']:
            print(f"  {ans}")
        print(f"R√©ponse correcte: {q['correct_answer']}\n")

# √âtape 1: Extraire le texte du fichier PowerPoint
extracted_text = extract_text_from_pptx(file_path)

# √âtape 2: Nettoyer le texte
cleaned_text = clean_text(extracted_text)

# Demander √† l'utilisateur du niveau de difficult√©
difficulty_level = input("Veuillez entrer le niveau de difficult√© (facile, moyen, difficile): ").lower()

# √âtape 3: G√©n√©rer des quiz bas√©s sur le texte nettoy√©
quiz = generate_quiz(cleaned_text, difficulty_level)

# √âtape 4: Afficher le quiz
display_quiz(quiz)

# üìå √âtape 1 : Monter Google Drive
from google.colab import drive
drive.mount('/content/drive')

# üìå √âtape 2 : Installer les biblioth√®ques n√©cessaires
!pip install python-pptx Pillow pandas tqdm

# üìå √âtape 3 : Importer les biblioth√®ques
import os
import io
import re
import uuid
import json
import pandas as pd
import numpy as np
from PIL import Image
from pptx import Presentation
from tqdm.notebook import tqdm
from collections import defaultdict

# üìå √âtape 4 : D√©finir le chemin du fichier et les dossiers de sortie
file_path = "/content/drive/MyDrive/BASE DE CONNAISSANCES/TW-Formation M√©tiers.pptx"
output_folder = "/content/drive/MyDrive/BASE DE CONNAISSANCES/TW_Formation_Extraite"
images_folder = os.path.join(output_folder, "images")

# Cr√©er les dossiers s'ils n'existent pas
os.makedirs(output_folder, exist_ok=True)
os.makedirs(images_folder, exist_ok=True)

# üìå √âtape 5 : Fonctions d'extraction am√©lior√©es

def clean_text(text):
    """Nettoie le texte tout en pr√©servant la structure"""
    # Remplacer les multiples espaces par un seul
    text = re.sub(r'\s+', ' ', text)
    # Retirer les num√©ros de liste au d√©but d'une ligne
    text = re.sub(r'^\s*\d+[\.\)-]?\s*', '', text)
    # Retirer les caract√®res sp√©ciaux probl√©matiques
    text = text.replace('\u000b', ' ').replace('\u0007', '')
    return text.strip()

def get_slide_layout_name(slide):
    """R√©cup√®re le nom du layout de la slide"""
    try:
        return slide.slide_layout.name
    except:
        return "Unknown Layout"

def get_shape_hierarchy(shape, level=0, max_level=5):
    """Extrait la hi√©rarchie des formes avec leur niveau d'imbrication"""
    if level > max_level:  # √âviter les r√©cursions infinies
        return []

    result = []
    # R√©cup√©rer les donn√©es de base de la forme
    if hasattr(shape, "text") and shape.text.strip():
        shape_data = {
            "id": str(uuid.uuid4())[:8],
            "level": level,
            "type": shape.__class__.__name__,
            "text": shape.text.strip(),
            "top": getattr(shape, "top", 0),
            "left": getattr(shape, "left", 0),
            "width": getattr(shape, "width", 0),
            "height": getattr(shape, "height", 0),
            "is_title": getattr(shape, "is_title", False)
        }
        result.append(shape_data)

    # R√©cup√©rer les sous-formes si existantes
    if hasattr(shape, "shapes"):
        for subshape in shape.shapes:
            result.extend(get_shape_hierarchy(subshape, level + 1, max_level))

    return result

def extract_slide_text(slide, slide_index):
    """Extrait tout le texte d'une diapositive avec structure hi√©rarchique"""
    shapes_data = []
    content_blocks = []
    title = ""

    # R√©cup√©rer le layout
    layout_name = get_slide_layout_name(slide)

    # Extraire toutes les formes
    for shape_idx, shape in enumerate(slide.shapes):
        hierarchy = get_shape_hierarchy(shape)
        if hierarchy:
            shapes_data.extend(hierarchy)

            # D√©terminer si c'est un titre
            for item in hierarchy:
                if item["is_title"] or item["top"] < 100:
                    if not title or len(item["text"]) > len(title):
                        title = item["text"]
                else:
                    # Traiter le texte
                    text_lines = item["text"].split('\n')
                    for line in text_lines:
                        clean_line = clean_text(line)
                        if clean_line:
                            content_blocks.append({
                                "shape_id": item["id"],
                                "text": clean_line,
                                "level": item["level"],
                                "y_position": item["top"]
                            })

    # Si aucun titre n'a √©t√© trouv√©, essayez de d√©terminer le meilleur candidat
    if not title and shapes_data:
        top_shapes = sorted(shapes_data, key=lambda x: x["top"])
        if top_shapes:
            title = top_shapes[0]["text"]

    # Trier les blocs de contenu par position verticale
    content_blocks.sort(key=lambda x: (x["y_position"], x["level"]))

    # Construire le contenu structur√©
    content = [block["text"] for block in content_blocks]

    return {
        "slide_num": slide_index + 1,
        "layout": layout_name,
        "title": title,
        "content": content,
        "raw_shapes": shapes_data,
        "full_text": " ".join([title] + content) if title else " ".join(content)
    }

def extract_slide_images(slide, slide_index):
    """Extrait toutes les images d'une diapositive"""
    images = []

    for shape_idx, shape in enumerate(slide.shapes):
        if hasattr(shape, "image"):
            try:
                # Extraire l'image
                image_data = shape.image.blob
                image_filename = f"slide_{slide_index+1}_image_{shape_idx+1}.png"
                image_path = os.path.join(images_folder, image_filename)

                # Enregistrer l'image
                with open(image_path, "wb") as f:
                    f.write(image_data)

                # Obtenir les dimensions de l'image
                image = Image.open(io.BytesIO(image_data))
                width, height = image.size

                # Ajouter les m√©tadonn√©es de l'image
                images.append({
                    "filename": image_filename,
                    "path": image_path,
                    "width": width,
                    "height": height,
                    "position_x": getattr(shape, "left", 0),
                    "position_y": getattr(shape, "top", 0),
                    "shape_width": getattr(shape, "width", 0),
                    "shape_height": getattr(shape, "height", 0)
                })
            except Exception as e:
                print(f"Erreur lors de l'extraction de l'image sur la diapositive {slide_index+1}: {str(e)}")

    return images

def extract_presentation_metadata(prs):
    """Extrait les m√©tadonn√©es de la pr√©sentation"""
    props = prs.core_properties
    return {
        "title": getattr(props, "title", "") or "Titre inconnu",
        "author": getattr(props, "author", "") or "Auteur inconnu",
        "subject": getattr(props, "subject", "") or "",
        "keywords": getattr(props, "keywords", "") or "",
        "created": str(getattr(props, "created", "")),
        "modified": str(getattr(props, "modified", "")),
        "last_modified_by": getattr(props, "last_modified_by", "") or "",
        "revision": getattr(props, "revision", "") or "",
        "slide_count": len(prs.slides),
        "content_status": getattr(props, "content_status", "") or ""
    }

# üìå √âtape 6 : Extraction compl√®te de la pr√©sentation
def extract_full_presentation(file_path):
    """Extrait tout le contenu structur√© d'une pr√©sentation PowerPoint"""
    try:
        print(f"Chargement de la pr√©sentation: {file_path}")
        prs = Presentation(file_path)

        # Extraire les m√©tadonn√©es
        metadata = extract_presentation_metadata(prs)
        print(f"Pr√©sentation charg√©e: {metadata['title']} ({metadata['slide_count']} diapositives)")

        # Pr√©parer les structures de donn√©es
        slides_data = []
        all_images = []
        topics = defaultdict(list)

        # Extraire chaque diapositive
        print("Extraction des diapositives en cours...")
        for i, slide in enumerate(tqdm(prs.slides, total=len(prs.slides))):
            # Extraire le texte
            slide_content = extract_slide_text(slide, i)
            slides_data.append(slide_content)

            # Extraire les images
            slide_images = extract_slide_images(slide, i)
            if slide_images:
                slide_content["images"] = slide_images
                all_images.extend(slide_images)

            # Identifier les th√®mes potentiels
            if slide_content["title"]:
                topic = slide_content["title"].split(" ")[0] if " " in slide_content["title"] else slide_content["title"]
                topics[topic].append(i + 1)

        # Organiser les r√©sultats
        result = {
            "metadata": metadata,
            "slides": slides_data,
            "topics": [{"name": k, "slides": v} for k, v in topics.items()],
            "image_count": len(all_images),
            "images": all_images
        }

        return result

    except Exception as e:
        print(f"Erreur lors de l'extraction: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

# üìå √âtape 7 : Ex√©cuter l'extraction et sauvegarder les r√©sultats
print("D√©marrage de l'extraction compl√®te...")
presentation_data = extract_full_presentation(file_path)

if presentation_data:
    # Sauvegarder les r√©sultats complets en JSON
    json_path = os.path.join(output_folder, "presentation_complete.json")
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(presentation_data, f, ensure_ascii=False, indent=2)

    # Cr√©er un DataFrame pour les diapositives
    df_slides = pd.DataFrame([{
        "slide_num": slide["slide_num"],
        "title": slide["title"],
        "content": "\n".join(slide["content"]) if isinstance(slide["content"], list) else slide["content"],
        "layout": slide["layout"],
        "image_count": len(slide.get("images", [])),
        "full_text": slide["full_text"]
    } for slide in presentation_data["slides"]])

    # Sauvegarder le DataFrame en CSV et Excel
    csv_path = os.path.join(output_folder, "slides_content.csv")
    excel_path = os.path.join(output_folder, "slides_content.xlsx")
    df_slides.to_csv(csv_path, index=False)
    df_slides.to_excel(excel_path, index=False)

    # Cr√©er un document texte structur√© avec tout le contenu
    text_path = os.path.join(output_folder, "presentation_text.txt")
    with open(text_path, 'w', encoding='utf-8') as f:
        f.write(f"TITRE: {presentation_data['metadata']['title']}\n")
        f.write(f"AUTEUR: {presentation_data['metadata']['author']}\n")
        f.write(f"DATE: {presentation_data['metadata']['created']}\n\n")

        f.write("=" * 80 + "\n\n")

        for slide in presentation_data["slides"]:
            f.write(f"DIAPOSITIVE {slide['slide_num']}: {slide['title']}\n")
            f.write("-" * 80 + "\n")

            if isinstance(slide["content"], list):
                for item in slide["content"]:
                    f.write(f"‚Ä¢ {item}\n")
            else:
                f.write(slide["content"])

            if "images" in slide:
                f.write("\nIMAGES:\n")
                for img in slide["images"]:
                    f.write(f"  - {img['filename']}\n")

            f.write("\n" + "=" * 80 + "\n\n")

    print(f"‚úÖ Extraction termin√©e avec succ√®s!")
    print(f"üìä {len(presentation_data['slides'])} diapositives extraites")
    print(f"üñºÔ∏è {presentation_data['image_count']} images extraites")
    print(f"üìÅ R√©sultats sauvegard√©s dans: {output_folder}")
    print(f"üìÑ Fichiers cr√©√©s:")
    print(f"   - {json_path}")
    print(f"   - {csv_path}")
    print(f"   - {excel_path}")
    print(f"   - {text_path}")
    print(f"   - Dossier d'images: {images_folder}")
else:
    print("‚ùå L'extraction a √©chou√©.")